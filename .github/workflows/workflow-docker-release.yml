name: workflow-docker-release

on:
  workflow_call:
    inputs:
      tags:
        required: true
        type: string
      platforms:
        required: false
        type: string
        default: 'linux/amd64'
      checkout_ref:
        required: false
        type: string
        default: ''
    secrets:
      CR_PAT:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      EMAIL_ADDRESS:
        required: true
      EMAIL_PASSWORD:
        required: true
      IMMORTALITY_PAT:
        required: true
      QUAY_TOKEN:
        required: true
      QUAY_USERNAME:
        required: true
      TDB_PAT:
        required: true

env:
  REGISTRY_IMAGE: ${{ github.repository }}

jobs:
  # build amd64 image and run tests
  build-amd64-test:
    runs-on: ubuntu-latest
    outputs:
      # create outputs for use in other jobs
      test_tag: ${{ steps.generate_temporary_tag_name.outputs.test_tag }}
      app_name: ${{ steps.generate_app_name.outputs.app_name }}
      release_tag: ${{ steps.identify_github_release_tag_name.outputs.release_tag }}
      tag_name_full_version: ${{ steps.generate_registry_tag_names.outputs.tag_name_full_version }}
      tag_name_major_version: ${{ steps.generate_registry_tag_names.outputs.tag_name_major_version }}
      tag_name_major_minor_version: ${{ steps.generate_registry_tag_names.outputs.tag_name_major_minor_version }}
      tag_name_latest_version: ${{ steps.generate_registry_tag_names.outputs.tag_name_latest_version }}
      registry_tag_names: ${{ steps.generate_registry_tag_names.outputs.registry_tag_names }}
      amd64_digest: ${{ steps.build-amd64-test.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_ref || github.ref }}

      - name: Set up QEMU for multi-arch support
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      # note only required in this job
      - name: Sync GitHub README.md with Docker Hub
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }} # NOTE: This MUST be the password NOT the token
          repository: ${{ github.repository }}
          short-description: ${{ github.event.repository.description }}

      - name: DEBUG Show Runners environment
        shell: bash
        run: |
            export

      - name: Identify GitHub Release tag name
        id: identify_github_release_tag_name
        # get tag name from runners environment 'GITHUB_REF_NAME' and then use bash substring
        # to strip out '+' symbol - required due to gcr not supporting this as a tag
        # name (docker hub does support it).
        # note if push is NOT triggered by tag then 'GITHUB_REF_NAME' will be the branch name.
        shell: bash
        run: |
            github_ref_name="${GITHUB_REF_NAME}"
            release_tag="${github_ref_name//+/-}"
            echo "[debug] Generated tag name is '${release_tag}'"
            echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT

      - name: Identify GitHub branch name
        id: identify_github_branch_name
        shell: bash
        run: |
          git_branch_name="$(git branch --show-current)"
          echo "git_branch_name=${git_branch_name}" >> $GITHUB_OUTPUT

      - name: Generate temporary tag name
        id: generate_temporary_tag_name
        shell: bash
        run: |
          test_tag=$(date +%Y%m%d%H%M%S)
          echo "[debug] Generated test tag name is '${test_tag}'"
          echo "test_tag=$test_tag" >> $GITHUB_OUTPUT

      - name: Generate app name
        id: generate_app_name
        shell: bash
        run: |
          app_name=$(echo "${GITHUB_REPOSITORY}" | grep -P -o -m 1 '(?<=/arch-).*')
          echo "[debug] Generated app name is '${app_name}'"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT

      - name: Generate major and major-minor version tag names
        id: generate_version_tags
        shell: bash
        run: |
          # Get release tag name
          release_version="${{ steps.identify_github_release_tag_name.outputs.release_tag }}"

          # Validate and construct major and major-minor versions
          if [[ "${release_version}" =~ ^(v?[0-9]+)\.([0-9]+)\.[0-9]+ ]]; then
            major_version="${BASH_REMATCH[1]}"
            minor_version="${BASH_REMATCH[2]}"
            major_minor_version="${major_version}.${minor_version}"
            echo "[debug] Constructed major version tag name: ${major_version}"
            echo "[debug] Constructed major-minor version tag name: ${major_minor_version}"
            echo "major_version=${major_version}" >> $GITHUB_OUTPUT
            echo "major_minor_version=${major_minor_version}" >> $GITHUB_OUTPUT
          else
            echo "[warn] Release tag '${release_version}' does not include 3 or more octets, major and major-minor version tag names not constructed."
            echo "major_version=" >> $GITHUB_OUTPUT
            echo "major_minor_version=" >> $GITHUB_OUTPUT
          fi

      - name: Generate registry tag names
        id: generate_registry_tag_names
        shell: bash
        run: |
          # Define registries
          registries=(
            "${{ github.repository }}"
            "quay.io/${{ github.repository }}"
            "ghcr.io/${{ github.repository }}"          )

          # Construct tag names for each registry
          registry_tag_names=""
          for registry in "${registries[@]}"; do
            registry_tag_names+="${registry}:${{ steps.identify_github_release_tag_name.outputs.release_tag }}, ${registry}:latest, "
            if [[ -n "${{ steps.generate_version_tags.outputs.major_version }}" ]]; then
              registry_tag_names+="${registry}:${{ steps.generate_version_tags.outputs.major_version }}, "
            fi
            if [[ -n "${{ steps.generate_version_tags.outputs.major_minor_version }}" ]]; then
              registry_tag_names+="${registry}:${{ steps.generate_version_tags.outputs.major_minor_version }}, "
            fi
          done

          # Remove trailing comma and space
          registry_tag_names="${registry_tag_names%, }"

          echo "[debug] Constructed registry tag names: ${registry_tag_names}"

          # get current branch name
          # note do NOT use GITHUB_REF here as it may contain the tag name NOT the branch name
          git_branch_name="$(git branch --show-current)"
          echo "[debug] Current git branch name is '${git_branch_name}'"

          # if current branch is main or master then tag as per normal, else append branch name to tag name
          if [[ "${git_branch_name}" == "main" || "${git_branch_name}" == "master" ]]; then
            echo "tag_name_full_version=${{ steps.identify_github_release_tag_name.outputs.release_tag }}" >> $GITHUB_OUTPUT
            echo "tag_name_major_version=${{ steps.generate_version_tags.outputs.major_version }}" >> $GITHUB_OUTPUT
            echo "tag_name_major_minor_version=${{ steps.generate_version_tags.outputs.major_minor_version }}" >> $GITHUB_OUTPUT
            echo "tag_name_latest_version=latest" >> $GITHUB_OUTPUT
            echo "registry_tag_names=${registry_tag_names}" >> $GITHUB_OUTPUT
          else
            echo "tag_name_full_version=${{ steps.identify_github_release_tag_name.outputs.release_tag }}-${git_branch_name}" >> $GITHUB_OUTPUT
            echo "tag_name_major_version=${{ steps.generate_version_tags.outputs.major_version }}-${git_branch_name}" >> $GITHUB_OUTPUT
            echo "tag_name_major_minor_version=${{ steps.generate_version_tags.outputs.major_minor_version }}-${git_branch_name}" >> $GITHUB_OUTPUT
            echo "tag_name_latest_version=latest-${git_branch_name}" >> $GITHUB_OUTPUT
            echo "registry_tag_names=${registry_tag_names}-${git_branch_name}" >> $GITHUB_OUTPUT
          fi

      - name: Remove unnecessary directories to free up space
        run: |
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android/sdk/ndk
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

      - name: Build amd64 image for testing
        id: build-amd64-test
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.release_tag }}
            APPNAME=${{ steps.generate_app_name.outputs.app_name }}

      - name: Run tests using previously built image
        shell: bash
        run: |
          git_clone_scripts_dest="/tmp/scripts"
          git_clone_scripts_repo="https://github.com/binhex/scripts.git"
          git clone "${git_clone_scripts_repo}" "${git_clone_scripts_dest}"
          "${git_clone_scripts_dest}/scripts/docker/testrunner.sh" --app-name ${{ steps.generate_app_name.outputs.app_name }} --image-name "ghcr.io/${{ github.repository }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}"

      - name: Build and push amd64 images by tag (single arch)
        id: build-final-amd64-only
        if: ${{ !contains(inputs.platforms, 'linux/arm64') }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.generate_registry_tag_names.outputs.registry_tag_names }}
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.release_tag }}
            APPNAME=${{ steps.generate_app_name.outputs.app_name }}

      - name: Build and push amd64 images by digest (multi arch)
        id: build-amd64-digest
        if: contains(inputs.platforms, 'linux/arm64')
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          # note do NOT specify the tag name here, only repo name, you are pushing by digest not tag
          tags: ${{ github.repository }}
          outputs: |
            type=image,name=${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
            type=image,name=ghcr.io/${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
            type=image,name=quay.io/${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.release_tag }}
            APPNAME=${{ steps.generate_app_name.outputs.app_name }}

      - name: Export amd64 digest (multi arch)
        if: contains(inputs.platforms, 'linux/arm64')
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build-amd64-digest.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload amd64 digest (multi arch)
        if: contains(inputs.platforms, 'linux/arm64')
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd64-${{ inputs.tags }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # Build arm64 image
  build-arm64:
    runs-on: ubuntu-24.04-arm
    needs: build-amd64-test
    if: contains(inputs.platforms, 'linux/arm64')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_ref || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build and push arm64 images by digest (multi arch)
        id: build-arm64
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          labels: ${{ needs.meta.outputs.labels }}
          # note do NOT specify the tag name here, only the repo name, you are pushing by digest not tag
          tags: ${{ github.repository }}
          outputs: |
            type=image,name=${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
            type=image,name=ghcr.io/${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
            type=image,name=quay.io/${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            RELEASETAG=${{ needs.build-amd64-test.outputs.release_tag }}
            APPNAME=${{ needs.build-amd64-test.outputs.app_name }}

      - name: Export arm64 digest (multi arch)
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build-arm64.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload arm64 digest (multi arch)
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm64-${{ inputs.tags }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # merge manifests and push final multi-arch image
  merge-push:
    runs-on: ubuntu-latest
    needs:
      - build-arm64
      - build-amd64-test
    if: contains(inputs.platforms, 'linux/arm64') && always() && needs.build-amd64-test.result == 'success'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*-${{ inputs.tags }}-${{ github.run_id }}-${{ github.run_attempt }}
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # note 'images' format is <registry>/<owner>/<image name>
          images: |
            ${{ github.repository }}
            quay.io/${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # note key name 'value' must be set to this for type raw
          # note we are using 'raw' type not 'semver', as not all release versions follow semver
          tags: |
            type=raw,value=${{ needs.build-amd64-test.outputs.tag_name_full_version }}
            type=raw,value=${{ needs.build-amd64-test.outputs.tag_name_major_version }}
            type=raw,value=${{ needs.build-amd64-test.outputs.tag_name_major_minor_version }}
            type=raw,value=${{ needs.build-amd64-test.outputs.tag_name_latest_version }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          echo "[debug] Displaying Docker metadata output json: '${DOCKER_METADATA_OUTPUT_JSON}'"
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
