name: workflow-docker-release

on:
  workflow_call:
    inputs:
      tags:
        required: true
        type: string
      platforms:
        required: false
        type: string
        default: 'linux/amd64'
    secrets:
      CR_PAT:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      EMAIL_ADDRESS:
        required: true
      EMAIL_PASSWORD:
        required: true
      GITLAB_TOKEN:
        required: true
      GITLAB_USERNAME:
        required: true
      IMMORTALITY_PAT:
        required: true
      QUAY_TOKEN:
        required: true
      QUAY_USERNAME:
        required: true
      TDB_PAT:
        required: true

jobs:
  gcr-dockerhub-build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU for multi-arch support
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Login to GitLab
        uses: docker/login-action@v3
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_TOKEN }}
      - name: Sync GitHub README.md with Docker Hub
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }} # NOTE: This MUST be the password NOT the token
          repository: ${{ github.repository }}
          short-description: ${{ github.event.repository.description }}
      - name: DEBUG Show Runners environment
        shell: bash
        run: |
            export
      - name: DEBUG Show input parameters
        shell: bash
        run: |
            echo "[debug] Input tags: '${{ inputs.tags }}'"
            echo "[debug] Input platforms: '${{ inputs.platforms }}'"
      - name: Identify GitHub Release tag name
        # get tag name from runners environment 'GITHUB_REF_NAME' and then use bash substring
        # to strip out '+' symbol - required due to gcr not supporting this as a tag
        # name (docker hub does support it).
        # note if push is NOT triggered by tag then 'GITHUB_REF_NAME' will be the branch name.
        shell: bash
        run: |
            tag="${GITHUB_REF_NAME}" && echo "tag=${tag//+/-}" >> $GITHUB_OUTPUT
            echo "[debug] Generated tag name is '${tag}'"
            echo "tag=$tag" >> $GITHUB_OUTPUT
        id: identify_github_release_tag_name
      - name: Generate temporary tag name
        shell: bash
        run: |
          test_tag=$(date +%Y%m%d%H%M%S)
          echo "[debug] Generated test tag name is '${test_tag}'"
          echo "test_tag=$test_tag" >> $GITHUB_OUTPUT
        id: generate_temporary_tag_name
      - name: Generate app name
        shell: bash
        run: |
          app_name=$(echo "${GITHUB_REPOSITORY}" | grep -P -o -m 1 '(?<=/arch-).*')
          echo "[debug] Generated app name is '${app_name}'"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
        id: generate_app_name
      - name: Remove unnecessary directories to free up space
        run: |
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android/sdk/ndk
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
      - name: Build amd64 image for testing
        uses: Wandalen/wretry.action@v3
        with:
          action: docker/build-push-action@v6
          with: |
            context: .
            load: true
            tags: ghcr.io/${{ github.repository }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}
            build-args: |
              RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.tag }}
              APPNAME=${{ steps.generate_app_name.outputs.app_name }}
          attempt_limit: 3
          attempt_delay: 600000
      - name: Run tests using previously built image
        shell: bash
        run: |
          git_clone_scripts_dest="/tmp/scripts"
          git_clone_scripts_repo="https://github.com/binhex/scripts.git"
          git clone "${git_clone_scripts_repo}" "${git_clone_scripts_dest}"
          "${git_clone_scripts_dest}/scripts/docker/testrunner.sh" --app-name ${{ steps.generate_app_name.outputs.app_name }} --image-name "ghcr.io/${{ github.repository }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}"
      - name: Generate major and major-minor version tag names
        shell: bash
        run: |
          # Get release tag name
          release_version="${{ steps.identify_github_release_tag_name.outputs.tag }}"

          # Validate and construct major and major-minor versions
          if [[ "${release_version}" =~ ^(v?[0-9]+)\.([0-9]+)\.[0-9]+ ]]; then
            major_version="${BASH_REMATCH[1]}"
            minor_version="${BASH_REMATCH[2]}"
            major_minor_version="${major_version}.${minor_version}"
            echo "[debug] Constructed major version tag name: ${major_version}"
            echo "[debug] Constructed major-minor version tag name: ${major_minor_version}"
            echo "major_version=${major_version}" >> $GITHUB_OUTPUT
            echo "major_minor_version=${major_minor_version}" >> $GITHUB_OUTPUT
          else
            echo "[warn] Release tag '${release_version}' does not include 3 or more octets, major and major-minor version tag names not constructed."
            echo "major_version=" >> $GITHUB_OUTPUT
            echo "major_minor_version=" >> $GITHUB_OUTPUT
          fi
        id: generate_version_tags
      - name: Generate tag names
        shell: bash
        run: |
          # Define registries
          registries=(
            "${{ github.repository }}"
            "quay.io/${{ github.repository }}"
            "ghcr.io/${{ github.repository }}"
            "registry.gitlab.com/${{ github.repository }}"
          )

          # Construct tag names
          tag_names=""
          for registry in "${registries[@]}"; do
            tag_names+="${registry}:${{ steps.identify_github_release_tag_name.outputs.tag }}, ${registry}:latest, "
            if [[ -n "${{ steps.generate_version_tags.outputs.major_version }}" ]]; then
              tag_names+="${registry}:${{ steps.generate_version_tags.outputs.major_version }}, "
            fi
            if [[ -n "${{ steps.generate_version_tags.outputs.major_minor_version }}" ]]; then
              tag_names+="${registry}:${{ steps.generate_version_tags.outputs.major_minor_version }}, "
            fi
          done

          # Remove trailing comma and space
          tag_names="${tag_names%, }"

          # Output tag names
          echo "[debug] Constructed tag names: ${tag_names}"
          echo "tag_names=${tag_names}" >> $GITHUB_OUTPUT
        id: generate_tag_names
      - name: Build, tag and push images to registries
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.generate_tag_names.outputs.tag_names }}
          build-args: |
            RELEASETAG=${{ steps.identify_github_release_tag_name.outputs.tag }}
            APPNAME=${{ steps.generate_app_name.outputs.app_name }}
